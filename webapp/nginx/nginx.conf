user www-data;
worker_processes auto;
pid /run/nginx.pid;
worker_rlimit_nofile  4096; # worker_connections の 4 倍程度
events {
  worker_connections 1024; # 大きくするなら worker_rlimit_nofile も大きくする（file descriptor数の制限を緩める)
}

http {
  # alp用のlog format
  log_format ltsv "time:$time_local"
              "\thost:$remote_addr"
              "\tforwardedfor:$http_x_forwarded_for"
              "\treq:$request"
              "\tstatus:$status"
              "\tmethod:$request_method"
              "\turi:$request_uri"
              "\tsize:$body_bytes_sent"
              "\treferer:$http_referer"
              "\tua:$http_user_agent"
              "\treqtime:$request_time"
              "\tcache:$upstream_http_x_cache"
              "\truntime:$upstream_http_x_runtime"
              "\tapptime:$upstream_response_time"
              "\tvhost:$host"
              "\treqbody:$request_body";
  access_log /var/log/nginx/access.log ltsv;
  # access_log  off; # 不要になったらOFFにする

  # 基本設定
  sendfile    on;
  tcp_nopush  on;
  tcp_nodelay on;
  types_hash_max_size 2048;
  server_tokens    off;

  # mime.type の設定
  include       /etc/nginx/mime.types;

  # Keepalive 設定
  keepalive_timeout 65;
  keepalive_requests 500;

  # Proxy cache 設定
  proxy_cache_path /var/cache/nginx/cache levels=1:2 keys_zone=zone1:1m max_size=1g inactive=1h;
  proxy_temp_path  /var/cache/nginx/tmp;

  # 複数serverへ proxy
  upstream app {
    server 192.100.0.1:5000 weight=2;  // weight をつけるとproxyする量を変更可能。defaultは1。多いほどたくさんrequestを振り分ける。
    server 192.100.0.2:5000;
    server 192.100.0.3:5000;
    # keepalive 60; app server への connection を keepalive する。app が対応できるならした方が良い。
  }

  server {
    # HTTP/2 (listen 443 の後ろに http2 ってつけるだけ。ブラウザからのリクエストの場合ssl必須）
    listen 443 ssl http2;

    # TLS の設定
    listen 443 default ssl;
    # server_name example.com;
    ssl on;
    ssl_certificate /ssl/oreore.crt;
    ssl_certificate_key /ssl/oreore.key;
    # SSL Sesssion Cache
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1m;  # cacheする時間。1mは1分。

    # reverse proxy の 設定
    location / {
      proxy_pass http://127.0.0.1:5000;
    }

    # Proxy cache
    location /cached/ {
      proxy_cache zone1;
      # proxy_set_header X-Real-IP $remote_addr;
      # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # proxy_set_header Host $http_host;
      proxy_pass http://localhost:9292/;
      # デフォルトでは 200, 301, 302 だけキャッシュされる。proxy_cache_valid で増やせる。
      # proxy_cache_valid 200 301 302 3s;
      # cookie を key に含めることもできる。デフォルトは $scheme$proxy_host$request_uri;
      # proxy_cache_key $proxy_host$request_uri$cookie_jessionid;
      # レスポンスヘッダにキャッシュヒットしたかどうかを含める
      add_header X-Nginx-Cache $upstream_cache_status;
    }

    # static file配信
    location ~ .*\.(htm|html|css|js|jpg|png|gif|ico) {
      root /home/isucon/webapp/public;
      expires 24h;
      add_header Cache-Control public;

      open_file_cache max=100 inactive=20s; # file descriptor などを cache

      gzip on;  # cpu 使うのでメリット・デメリット見極める必要あり。gzip_static 使えるなら事前にgzip圧縮した上でそちらを使う。
      gzip_types text/css application/javascript application/json application/font-woff application/font-tff image/gif image/png image/jpeg image/svg+xml image/x-icon application/octet-stream;
      gzip_disable "msie6";
      gzip_static on;  # nginx configure時に --with-http_gzip_static_module 必要
      gzip_vary on;
    }
  }
}